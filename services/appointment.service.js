const mongoose = require("mongoose");
const PatientProfile = require("../models/patient.model");
const Appointment = require("../models/appointment.model");
const Doctor_user = require("../models/doctor.model");
const AppError = require("../utils/appError.util");
const Schedule = require("../models/schedule.model");
const { sendEmail } = require("../utils/email.util");
const moment = require("moment");

module.exports.createAppointment = async (body, user) => {
  const { doctorId, dateBooking, timeBooking, description } = body;

  // üîπ T√¨m h·ªì s∆° b·ªánh nh√¢n b·∫±ng userId t·ª´ token
  const patient = await PatientProfile.findOne({ userId: user._id || user.id });

  if (!doctorId) throw new AppError("Thi·∫øu doctorId", 400);
  if (!patient) throw new AppError("Kh√¥ng t√¨m th·∫•y h·ªì s∆° b·ªánh nh√¢n", 400);
  if (!dateBooking) throw new AppError("Thi·∫øu ng√†y ƒë·∫∑t l·ªãch", 400);
  if (!timeBooking) throw new AppError("Thi·∫øu gi·ªù ƒë·∫∑t l·ªãch", 400);

  if (!mongoose.Types.ObjectId.isValid(doctorId)) {
    throw new AppError("doctorId kh√¥ng h·ª£p l·ªá", 400);
  }

  // 2Ô∏è‚É£ Ki·ªÉm tra b√°c sƒ© t·ªìn t·∫°i
  const doctor = await Doctor_user.findById(doctorId);
  if (!doctor || doctor.isDeleted) {
    throw new AppError("Kh√¥ng t√¨m th·∫•y b√°c sƒ©", 404);
  }

  // 3Ô∏è‚É£ Ki·ªÉm tra tr√πng khung gi·ªù
  const confirmedCount = await Appointment.countDocuments({
    doctorId,
    dateBooking,
    timeBooking,
    status: "confirmed",
  });

  if (confirmedCount >= 1) {
    throw new AppError("Khung gi·ªù n√†y ƒë√£ c√≥ b·ªánh nh√¢n kh√°c ƒë∆∞·ª£c x√°c nh·∫≠n", 400);
  }

  // 4Ô∏è‚É£ T·∫°o l·ªãch h·∫πn
  const newAppointment = new Appointment({
    doctorId,
    patientId: patient._id,
    dateBooking,
    timeBooking,
    description,
    status: "pending",
  });

  await newAppointment.save();

  // 5Ô∏è‚É£ C·∫≠p nh·∫≠t schedule
  const normalizedTime = timeBooking.replace(/\s/g, "");
  const schedule = await Schedule.findOne({
    doctorId,
    date: moment(dateBooking).format("DD/MM/YYYY"),
    time: normalizedTime,
  });

  if (!schedule) throw new AppError("Schedule kh√¥ng t·ªìn t·∫°i", 404);

  schedule.sumBooking += 1;
  await schedule.save();

  // 6Ô∏è‚É£ G·ª≠i mail th√¥ng b√°o
  console.log("üì© G·ª≠i mail cho:", user.email);
  if (user?.email) {
    await sendEmail(
      user.email,
      "Y√™u c·∫ßu ƒë·∫∑t l·ªãch c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n",
      `<p>Xin ch√†o ${patient.firstName},</p>
       <p>Y√™u c·∫ßu ƒë·∫∑t l·ªãch kh√°m c·ªßa b·∫°n v·ªõi b√°c sƒ© <b>${doctor.name}</b> ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n.</p>
       <p>Supporter c·ªßa ch√∫ng t√¥i s·∫Ω xem x√©t v√† g·ª≠i x√°c nh·∫≠n s·ªõm nh·∫•t qua email.</p>
       <p>Vui l√≤ng ƒë·ªÉ √Ω h·ªôp th∆∞ ƒë·ªÉ bi·∫øt k·∫øt qu·∫£ ƒë·∫∑t l·ªãch.</p>`
    );
  }

  return newAppointment;
};

module.exports.getAllAppointment = async () => {
  const appointment = await Appointment.find({ isDeleted: false, status: "pending" });
  return appointment;
}

module.exports.changeStatusAppointment = async (id, status) => {
  if (!id) throw new AppError("Thi·∫øu id appointment", 400);
  if (!status) throw new AppError("Thi·∫øu status appointment", 400);

  const validStatuses = ['pending', 'confirmed', 'completed', 'cancelled'];
  if (!validStatuses.includes(status)) {
    throw new AppError("status kh√¥ng h·ª£p l·ªá", 400);
  }

   const appointment = await Appointment.findOneAndUpdate(
    { _id: id, isDeleted: false },
    { status },
    { new: true, runValidators: true }
  );

  if (!appointment) {
    throw new AppError("Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn", 404);
  }

  return appointment;
};
